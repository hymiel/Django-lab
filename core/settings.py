"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# --------------------------------------------
"""환경 변수를 불러 올 수 있는 상태 세팅 값"""
import environ
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
"""Pathlib 기반: settings.py 파일이 위치한 디렉터리에서 두 단계 위(프로젝트 루트)로 올라감

from pathlib import Path

BASE_DIR = (                                # BASE_DIR 변수에 프로젝트 루트를 담습니다
    Path(__file__)                          # 1) 이 settings.py 파일의 경로(Path 객체로)
    .resolve()                              # 2) 심볼릭 링크가 있으면 실제 절대 경로로 변환
    .parent                                 # 3) 첫 번째 부모 디렉터리(settings.py가 속한 dj_lab/ 디렉터리)
    .parent                                 # 4) 두 번째 부모 디렉터리(project 루트, manage.py가 있는 곳)
)
"""

"""os.path 기반: 동일한 결과를 문자열(str) 형태로 얻기"""
import os

BASE_DIR = os.path.dirname(                  # BASE_DIR 변수에 문자열 타입의 프로젝트 루트를 담습니다
    os.path.dirname(                         # └── 한 단계 더 위의 디렉터리를 구하기 위해 중첩 호출
        os.path.abspath(__file__)            # 1) __file__ 경로를 절대 경로(str)로 변환
    )                                        # └── settings.py가 있는 디렉터리 경로
)                                            # └── 그 디렉터리의 부모 디렉터리(project 루트)

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
# --------------------------------------------

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

"""KEY 값은 환경 변수 처리"""
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=env("SECRET_KEY")
AES_KEY=env("AES_KEY")
# --------------------------------------------

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
# --------------------------------------------
"""기본 장고 앱 의존성 : Django 기본(코어) 앱, INSTALLED_APP > DJANGO_APP"""
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

"""직접 추가 된 DOMAIN_APP : 도메인 생성 시 수기 작성"""
DOMAIN_APPS = [
    'common.apps.CommonConfig',
    'auth.apps.AuthConfig',
    'users.apps.UsersConfig',
    'groups.apps.GroupsConfig',
    'boards.apps.BoardsConfig',
]

"""외부 패키지(REST framework, JWT 등)"""
THIRD_PARTY_APPS = [
    """Swagger 설정 시 필요한 패키지"""
    # 'rest_framework',
    # 'drf_yasg',
    
    """jwt"""
    'rest_framework_simplejwt.token_blacklist',  # 토큰 블랙리스트(로그아웃 시 토큰 폐기)
]

"""REST_FRAMEWORK"""
REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "common.exceptions.custom_exception_handler", # DRF 전체 예외를 이 포맷으로 맞추고 싶을 때, 일반 APIException 커스텀 시 불필요
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

INSTALLED_APPS = DJANGO_APPS + DOMAIN_APPS + THIRD_PARTY_APPS
# --------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.RequestLoggingMiddleware',  # ← 사용자 정의 미들웨어 등록 : 상단에 등록된 미들웨어가 먼저 요청을 받고, 마지막에 응답을 처리
    'myapp.middleware.LoggingMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # --------------------------------------------
        """pathlib.Path 방식"""
        # 'DIRS': [BASE_DIR / 'templates'], 
        """os.path 방식"""
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # --------------------------------------------
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


# --------------------------------------------
"""CONFIG 값에 따라 DB 설정 값 변경"""
print(f'========= 현재 실행 환경 : {env("CONFIG")} =============')

# CONFIG 값 설정 (LOCAL, DEV, PROD)
CONFIG = os.getenv('CONFIG')

db_prefix = f"{CONFIG}_DB_"

DB_ENGINE = os.getenv(f'{db_prefix}ENGINE')
DB_HOST = os.getenv(f'{db_prefix}HOST')
DB_NAME = os.getenv(f'{db_prefix}NAME')
DB_USERNAME = os.getenv(f'{db_prefix}USERNAME')
DB_PASS = os.getenv(f'{db_prefix}PASS')
DB_PORT = os.getenv(f'{db_prefix}PORT')

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.' + DB_ENGINE,
            'NAME': DB_NAME,
            'USER': DB_USERNAME,
            'PASSWORD': DB_PASS,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            """pathlib.Path 방식"""
            # 'NAME': BASE_DIR / 'db.sqlite3',
            """os.path 방식"""
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
# --------------------------------------------

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# --------------------------------------------
"""AUTH : DJANGO LOGIN SESSION 사용 시 설정 값"""
from datetime import timedelta

SESSION_COOKIE_NAME = " " #	쿠키 이름 (str)
SESSION_SAVE_EVERY_REQUEST = False  # 매 요청마다 세션 만료 시간 갱신 (bool)
SESSION_COOKIE_SECURE = False  # HTTPS 연결에서만 전송 (bool)
SESSION_COOKIE_AGE = int(timedelta(days=14).total_seconds())  # 세션 만료 시간 설정 (int)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 브라우저 종료 시 세션 삭제 (bool)
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies' # 세션 엔진 종류 (db, cache, cached_db, file, cookie 등)
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer' # 세션 데이터 직렬화 클래스 (PickleSerializer 또는 JSONSerializer)
SESSION_CACHE_ALIAS = 'default' # cache 백엔드 사용 시, 어떤 캐시를 쓸지 (CACHES에 정의된 alias (str)

SESSION_COOKIE_PATH = '/' # 쿠기가 유효한 URL 경로 범위
"""
"/"이면 “사이트의 모든 경로”에서 이 쿠키를 브라우저가 전송, 예를 들어 /account/ 페이지에서 이 경로에 맞지 않으면(경로가 /static/이라면) 쿠키를 보내지 않음 
"""

SESSION_COOKIE_DOMAIN = None # 쿠키가 전송될 도메인(호스트)
"""
None이면 “지금 접속한 호스트(예:www.example.com)”에만 전송되고,
".example.com"처럼 앞에 점을 붙이면 sub1.example.com, sub2.example.com 등 모든 서브도메인에서도 전송됩니다.
"""

SESSION_COOKIE_HTTPONLY = True # JavaScript(document.cookie)에서 이 쿠키에 접근할 수 없게 방지
"""
XSS(사이트 간 스크립트 공격)로부터 세션 탈취를 방지하기 위한 안전장치
"""

SESSION_COOKIE_SAMESITE = "Lax" # (또는 "Strict", None) 외부 사이트(다른 도메인)에서 요청할 때 이 쿠키를 함께 보낼지 제어
"""
Strict: 절대 보내지 않음. 다른 사이트에서의 모든 링크·폼·이미지 요청에 쿠키가 제외
Lax (기본권장): “최상위 네비게이션(GET)” 요청(예: 사용자가 다른 사이트에서 링크 클릭 
→ 내 사이트 진입에는 쿠키를 보내지만, 이미지·AJAX·POST 요청 등 크로스사이트 호출에는 보내지 않음
None: SameSite 제약을 해제. 이 경우 SESSION_COOKIE_SECURE=True (HTTPS 전용)도 반드시 설정해야 최신 브라우저에서 동작
"""
# --------------------------------------------


# --------------------------------------------
"""Django Migration Setting"""

# Custom User Model Setting, 설정하면 migration 실행 시 해당 모델이 기준이 됨
AUTH_USER_MODEL = ''
# 각 APP의 migration 비활성화 설정
MIGRATION_MODULES = {
    'users': None,
}
# --------------------------------------------
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ko-kr'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# --------------------------------------------
import platform
"""STATIC 설정"""
STATIC_URL = '/static/'  # 정적 파일 URL 경로
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # 정적 파일 경로
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # collectstatic용 디렉토리

"""MEDIA 설정"""
MEDIA_URL = '/media/uploads/'  # 업로드 파일 URL 경로
# 실행 환경에 따라 MEDIA_ROOT 설정
if "Windows" in platform.system():
    MEDIA_ROOT = 'C:/resources'
elif platform.system() in ["Linux", "Linux2"]:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/uploads/')

    if CONFIG == 'DEV':
        MEDIA_ROOT = os.path.join(BASE_DIR, 'media/uploads/dev/')
else:
    raise EnvironmentError("지원되지 않는 플랫폼입니다. MEDIA_ROOT를 설정할 수 없습니다.")
# --------------------------------------------
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --------------------------------------------
"""Django CELERY Setting"""
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = False
# --------------------------------------------


# --------------------------------------------
"""STATICFILES_STORAGE Setting : 정적 파일을 어떻게 수집하고 제공할지 결정"""
# 1) WhiteNoise를 쓸 때 (압축+해시 버전 관리)
#    - 압축(Compressed) 및 해시를 붙인 파일 이름(manifest)을 생성하여 캐시 문제를 방지
#    - 배포 환경에서 권장되는 방식
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# 2) Django 기본 manifest 스토리지
#    - collectstatic 시 각 파일명에 해시를 붙여 manifest.json에 기록
#    - 이 정보를 기반으로 템플릿에서 올바른 파일 URL을 참조
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# 3) Django 기본 파일 스토리지 (해시나 압축 없이 단순 제공)
#    - 개발 환경이나 캐시 관리가 필요 없을 때 사용
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# --------------------------------------------


# --------------------------------------------
"""SIMPLE_JWT 설정값"""
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),      # 액세스 토큰 유효기간
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),        # 리프레시 토큰 유효기간
    'ROTATE_REFRESH_TOKENS': True,                      # 리프레시 토큰 재발급
    'BLACKLIST_AFTER_ROTATION': True,                   # 리프레시 사용 후 블랙리스트
    'ALGORITHM': 'HS256',                               # 서명 알고리즘
    'SIGNING_KEY': SECRET_KEY,                          # settings.SECRET_KEY 사용
    'AUTH_HEADER_TYPES': ('Bearer',),                   # HTTP Authorization 헤더 접두사
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}
# --------------------------------------------



# --------------------------------------------
""" Logging 설정"""
LOGGING = {
    'version': 1, # 로깅 설정 버전 (항상 1)
    'disable_existing_loggers': False, # 기존 로거 무효화 여부 : True일 경우 Django 내부 기본 로거나 써드파티 로거까지 전부 비활성화, 권장값은 False (필요한 로거만 덮어써서 사용 가능)

    # 로그 메시지 출력 포맷
    'formatters': {
        'json': {
            'format': '{"time": "%(asctime)s", "level": "%(levelname)s", "message": "%(message)s"}',
        },
    },
    # 로그를 어떻게/어디에 기록할지
    'handlers': {
        'access_file': {
            """
            DEBUG(10)-디버깅용 상세 로그 (개발 중)
            INFO(20)-일반 정보 로그 (정상 흐름)
            WARNING(30)-주의 필요, 경고
            ERROR(40)-오류 발생 (실패 상황)
            CRITICAL(50)-시스템 장애급 치명적 오류
            """
            'level': 'INFO', # 해당 handler가 기록할 최소 로그 수준
            'class': 'logging.FileHandler', # 로그를 처리할 Python 로깅 클래스 (예: FileHandler, StreamHandler, RotatingFileHandler)
            'filename': 'logs/access.log', # 로그 저장 파일 경로
            'formatter': 'json', # 사용할 formatter 키 지정 (위에서 정의한 "json" 등)
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/error.log',
            'formatter': 'json',
        },
    },
 # 어떤 이름의 로거가 어떤 핸들러를 쓸지
    'loggers': {
        'access_logger': {
            'handlers': ['access_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'error_logger': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}
